# import python libraries
import numpy as np
import matplotlib.pyplot as plt
import scipy.sparse as sp
import scipy.sparse.linalg as linalg

def comp_mean(K,M,p,Grid,kvkh): # repo MDOT 
    # author: Marc Hesse, Afzal Shadab
    # date: 2 Mar 2021, 25 Apr 2021, 9 Feb 2022
    # Description:
    # Takes coefficient field, K, defined at the cell centers and computes the
    # mean specified by the power p and returns it in a sparse diagonal
    # matrix, Kd.
    
    # Input:
    # K = N by 1 column vector of cell centered values
    # M = Nf by N matrix that computes the arithmetic mean of a cell centered
    #     field on the cell faces. M is generated by build_ops.m
    # p = power of the generalized mean
    #       1 (arithmetic mean)
    #      -1 (harmonic mean)
    # Grid = structure containing information about the grid.
    # kvkh = anisotropy ratio (vertical/horizontal)
    
    # Output:
    # Kd = Nf by Nf diagonal matrix of power means at the cell faces.
    
    # Example call:
    # K = @(x) 1+x.^3;
    # Grid.xmin = 0; Grid.xmax = 1; Grid.Nx = 10;
    # Grid = build_grid(Grid);
    # [D,G,C,I,M] = build_ops(Grid);
    # Kd = comp_mean(K(Grid.xc),M,1,Grid,1);
    
    Kmean = (M @ K**p)**(1/p);                   # Compute general power mean
    
    if Grid.Ny == 1:
        Kd = sp.spdiags(Kmean.T,0,Grid.Nfx,Grid.Nfx);  # place on diagonal
    else:
        Kd = sp.spdiags(Kmean.T,0,Grid.Nf,Grid.Nf);  # place on diagonal
    
    return Kd;

'''
#Testing 

import sys
sys.path.insert(1, '../../HW1-Numerics/Python/')
sys.path.insert(1, '../../HW2-BC_LBVP/Python/')

# import personal libraries
from classfun import *
from build_gridfun2D import build_grid 
from build_opsfun2D import build_ops
from build_bndfun_optimized import build_bnd
from solve_lbvpfun_optimized import solve_lbvp

K = lambda x: 1+x**3;
Grid.xmin = 0; Grid.xmax = 1; Grid.Nx = 10;
Grid = build_grid(Grid);
[D,G,C,I,M] = build_ops(Grid);
Kd = comp_mean(K(Grid.xc),M,1,Grid,1);
'''